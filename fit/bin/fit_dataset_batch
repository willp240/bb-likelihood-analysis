#!/usr/bin/env python
import subprocess
import os
import errno

def submit_job(shell_script, submit_command, working_dir = "."):
    ''' Fire off the job
    :param str shell_script:
    :param str submit_command:
    :returns None:
    '''
    subprocess.check_call("cd {0} && {1} {2}".format(working_dir, submit_command, os.path.abspath(shell_script)), shell=True)
    
def write_shell_script(env, shell_script, args):
    ''' Write a shell script for a single job
    :param str config_file: in style of config.ini.example
    :param str env: path to environment file
    :param (str,) args: to pass to fit_dataset
    :returns None:
    '''
    with open(shell_script, "w") as f:
        f.write("source {0}\n".format(os.path.abspath(env)))
        f.write("cd /home/dunger/thesis_bb/fit/bin/ \n")
        f.write("./fit_dataset {0}\n".format(" ".join(args)))

if __name__ == "__main__":
    import argparse
    import glob
    parser = argparse.ArgumentParser()
    parser.add_argument("fit_config_file", type=str)
    parser.add_argument("dist_dir", type=str)
    parser.add_argument("cut_config_file", type=str)
    parser.add_argument("data_to_fit", type=str)
    parser.add_argument("output_directory", type=str)

    parser.add_argument("reps", type=int)
    parser.add_argument("env", type=str, help="required to run the job on the batch system")
    parser.add_argument("-submit_command", type=str, help="used to submit the job", default="qsub -l cput=01:59:59 ")
    args = parser.parse_args()


    # and another one for the output
    try:
        os.mkdir(args.output_directory)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise

    print "made dir ", args.output_directory
    sub_dir = os.path.join(args.output_directory, "fit_sub")
    try:
        os.mkdir(sub_dir)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise

    # now write a shell script for each one
    pass_on_args = [args.fit_config_file, args.dist_dir, args.cut_config_file, args.data_to_fit]
    sh_scripts = []
    for i in xrange(args.reps):
        sh_path = os.path.join(sub_dir, "part_{0}.sh".format(i))
        
        output_dir_path = os.path.abspath(os.path.join(args.output_directory, "part_{0}".format(i)))
        write_shell_script(args.env, sh_path, pass_on_args +  [output_dir_path])
        sh_scripts.append(sh_path)

    # now submit the jobs
    for sh in sh_scripts:
        submit_job(sh, args.submit_command, sub_dir)
        
